@page
@model SignalR.WebClient.Pages.ChatClientModel
@{
    ViewData["Title"] = "Chat Page";
}

<div class="container">
    <div class="row p-1">
        <div class="col-1">Sender</div>
        <div class="col-5"><input type="text" id="txtSender" /></div>
    </div>
    <div class="row p-1">
        <div class="col-1">Message</div>
        <div class="col-5"><input type="text" class="w-100" id="txtMessage" /></div>
    </div>
    <div class="row p-1">
        <div class="col-6 text-end">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <hr />
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>
<script src="~/lib/microsoft-signalr/signalr.js"></script>
<script>
    "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("https://localhost:7032/ChatHub").build();

    //Disable the send button until connection is established.
    document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (sender, message) 
    {
        var li = document.createElement("li");

        document.getElementById("messagesList").appendChild(li);

        // We can assign user-supplied strings to an element's textContent because it
        // is not interpreted as markup. If you're assigning in any other way, you
        // should be aware of possible script injection concerns.
        li.textContent = `${sender} says ${message}`;
    });

    connection.start().then(function () 
    {
        document.getElementById("sendButton").disabled = false;
    })
    .catch(function (err) 
    {
        return console.error(err.toString());
    });

    document.getElementById("sendButton").addEventListener("click", function (event) 
    {
        var sender = document.getElementById("txtSender").value;
        var message = document.getElementById("txtMessage").value;

        connection.invoke("SendMessage", sender, message)
        .catch(function (err) 
        {
            return console.error(err.toString());
        });

        event.preventDefault();
    });

</script>